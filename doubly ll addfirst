import java.util.*;

class Main {

  public static class DoublyLinkedList {
    private class Node {
      int data = 0;
      Node prev = null;
      Node next = null;

      Node(int data) {
        this.data = data;
      }

    }

    private Node head = null;
    private Node tail = null;
    private int size = 0;

    public String toString() {
      StringBuilder sb = new StringBuilder();
      Node curr = this.head;
      sb.append("[");
      while (curr != null) {
        sb.append(curr.data);
        if (curr.next != null)
          sb.append(", ");
        curr = curr.next;
      }
      sb.append("]");

      return sb.toString();
    }
     public int size() {
        return this.size;
    }
    
    private void addFirstNode(Node node) {
      if (this.size == 0)
        this.head = this.tail = node;
      else {
        node.next = this.head;
        this.head.prev = node;
        this.head = node;
      }
      this.size++;
    }
      private boolean ListIsEmptyException() {
      if (this.size == 0) {
        System.out.print("ListIsEmpty: ");
        return true;
      }
      return false;
    }

    private boolean indexIsInvalidException(int index, int leftRange, int rightRange) {
      if (index < leftRange || index > rightRange) {
        System.out.print("IndexIsInValid: ");
        return true;
      }
      return false;
    }
    
    public void addFirst(int val) {
      Node node = new Node(val);
      addFirstNode(node);
    }

    public void addLast(int val) {
      // complete this function.
      Node temp = new Node(val);
      temp.next = null;
      temp.prev = null;
      
      if(this.size == 0){
        head = tail = temp;  
      }else{
          tail.next = temp;
          temp.prev = tail;
          tail = temp;
      }
      size++;
      
      
    }
      public int removeFirst() {
       if(ListIsEmptyException()){
           return -1;
       }else if(this.size == 1){
           int val = head.data;
           head = tail = null;
           size = 0;
           return val;
       }
           int val = head.data;
           head = head.next;
           head.prev = null;
           size--;
           return val;
       
    }
     public int removeLast() {
        if(ListIsEmptyException()){
            return -1;
        }else if(size == 1){
            int val = tail.data;
            head = tail = null;
            size = 0;
        }
        int val = tail.data;
        tail = tail.prev;
        tail.next = null;
        size--;
        return val;
    }
        public int getFirst() {
        if(ListIsEmptyException()){
            return -1;
        }else{
            return head.data;
        }
    }

    public int getLast() {
        if(ListIsEmptyException()){
            return -1;
        }else{
            return tail.data;
        }
    }
      public int getAt(int index) {
        if(ListIsEmptyException()){
            return -1;
        }else if(indexIsInvalidException(index , 0 , size)){
            return -1;
        }else if(index == 0){
            return getFirst();
        }else if(index == size - 1){
            return getLast();
        }else{
            Node temp = head;
            for(int i = 0 ; i < index;i++){
                temp = temp.next;
            }
            
            return temp.data;
        }
    }
    
    
  }

  public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
    DoublyLinkedList dll = new DoublyLinkedList();

    String str = scn.nextLine();
    while (!str.equals("stop")) {
      String[] s = str.split(" ");
      if (s[0].equals("addFirst"))
        dll.addFirst(Integer.parseInt(s[1]));
      else if (s[0].equals("addLast"))
        dll.addLast(Integer.parseInt(s[1]));

      str = scn.nextLine();
    }

    System.out.println(dll);
  }
}
