class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) return null;
        return mergesort(lists , 0 , lists.length - 1 );
    }
    ListNode merge2list(ListNode l1 , ListNode l2){
       if (l1 == null || l2 == null)
            return l1 != null ? l1 : l2;
        
         ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;

        ListNode c1 = l1;
        ListNode c2 = l2;

        while (c1 != null && c2 != null) {
            if (c1.val <= c2.val) {
                prev.next = c1;
                c1 = c1.next;
            } else {
                prev.next = c2;
                c2 = c2.next;
            }
            prev = prev.next;
        }

        prev.next = (c1 != null ? c1 : c2);

        return dummy.next;
    }
    public ListNode mergesort(ListNode[] lists , int si , int ei ){
        if(si > ei) return null;
        if(si == ei) return lists[si];
        
        int mid = (si + ei)/2;
        ListNode fsh = mergesort(lists , si , mid);
        ListNode ssh = mergesort(lists , mid + 1 , ei);
        return merge2list(fsh , ssh);
    }
}
